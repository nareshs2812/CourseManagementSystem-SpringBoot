{"ast":null,"code":"const [enrollmentCounts, setEnrollmentCounts] = useState({});\nconst fetchEnrollmentCount = async courseId => {\n  try {\n    const response = await fetch(`http://localhost:8080/enrollments/count/${courseId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const count = await response.json();\n    return count;\n  } catch (error) {\n    console.error('Error fetching enrollment count:', error);\n    return 0;\n  }\n};\nconst fetchCourses = () => {\n  setLoading(true);\n  fetch(`http://localhost:8080/courses/createdBy/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => res.json()).then(async data => {\n    setCourses(data);\n    const countMap = {};\n    for (let course of data) {\n      const count = await fetchEnrollmentCount(course.courseId);\n      countMap[course.courseId] = count;\n    }\n    setEnrollmentCounts(countMap);\n    setLoading(false);\n  }).catch(err => {\n    console.error('Fetch error:', err);\n    setError(err.message);\n    setLoading(false);\n  });\n};","map":{"version":3,"names":["enrollmentCounts","setEnrollmentCounts","useState","fetchEnrollmentCount","courseId","response","fetch","headers","token","count","json","error","console","fetchCourses","setLoading","userId","then","res","data","setCourses","countMap","course","catch","err","setError","message"],"sources":["D:/CMS Spring Project/CMS-frontend/cms_frontend/src/components/AdminCourse.jsx"],"sourcesContent":["const [enrollmentCounts, setEnrollmentCounts] = useState({});\r\n\r\nconst fetchEnrollmentCount = async (courseId) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:8080/enrollments/count/${courseId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    });\r\n    const count = await response.json();\r\n    return count;\r\n  } catch (error) {\r\n    console.error('Error fetching enrollment count:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst fetchCourses = () => {\r\n  setLoading(true);\r\n  fetch(`http://localhost:8080/courses/createdBy/${userId}`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then(async (data) => {\r\n      setCourses(data);\r\n      const countMap = {};\r\n      for (let course of data) {\r\n        const count = await fetchEnrollmentCount(course.courseId);\r\n        countMap[course.courseId] = count;\r\n      }\r\n      setEnrollmentCounts(countMap);\r\n      setLoading(false);\r\n    })\r\n    .catch((err) => {\r\n      console.error('Fetch error:', err);\r\n      setError(err.message);\r\n      setLoading(false);\r\n    });\r\n};\r\n"],"mappings":"AAAA,MAAM,CAACA,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE5D,MAAMC,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2CF,QAAQ,EAAE,EAAE;MAClFG,OAAO,EAAE;QACP,eAAe,EAAE,UAAUC,KAAK;MAClC;IACF,CAAC,CAAC;IACF,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,OAAOD,KAAK;EACd,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,CAAC;EACV;AACF,CAAC;AAED,MAAME,YAAY,GAAGA,CAAA,KAAM;EACzBC,UAAU,CAAC,IAAI,CAAC;EAChBR,KAAK,CAAC,2CAA2CS,MAAM,EAAE,EAAE;IACzDR,OAAO,EAAE;MACP,eAAe,EAAE,UAAUC,KAAK;IAClC;EACF,CAAC,CAAC,CACCQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,CACzBM,IAAI,CAAC,MAAOE,IAAI,IAAK;IACpBC,UAAU,CAACD,IAAI,CAAC;IAChB,MAAME,QAAQ,GAAG,CAAC,CAAC;IACnB,KAAK,IAAIC,MAAM,IAAIH,IAAI,EAAE;MACvB,MAAMT,KAAK,GAAG,MAAMN,oBAAoB,CAACkB,MAAM,CAACjB,QAAQ,CAAC;MACzDgB,QAAQ,CAACC,MAAM,CAACjB,QAAQ,CAAC,GAAGK,KAAK;IACnC;IACAR,mBAAmB,CAACmB,QAAQ,CAAC;IAC7BN,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,CAAC,CACDQ,KAAK,CAAEC,GAAG,IAAK;IACdX,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEY,GAAG,CAAC;IAClCC,QAAQ,CAACD,GAAG,CAACE,OAAO,CAAC;IACrBX,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}